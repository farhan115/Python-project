You can generate SSH keys using the cryptography library in Python. Here is an example that generates an RSA key pair:

First, you need to install the cryptography library, which you can install via pip:

bash
Copy code
pip install cryptography
Then you can use the following script to generate a new SSH key pair:

python
Copy code
from cryptography.hazmat.primitives import serialization as crypto_serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.backends import default_backend as crypto_default_backend

def generate_ssh_key_pair(key_comment):
    key = rsa.generate_private_key(
        backend=crypto_default_backend(),
        public_exponent=65537,
        key_size=2048
    )

    private_key = key.private_bytes(
        crypto_serialization.Encoding.PEM,
        crypto_serialization.PrivateFormat.PKCS8,
        crypto_serialization.NoEncryption()
    )

    public_key = key.public_key().public_bytes(
        crypto_serialization.Encoding.OpenSSH,
        crypto_serialization.PublicFormat.OpenSSH
    )

    return private_key, public_key + ' '.encode() + key_comment.encode()

# generate a key pair
private_key, public_key = generate_ssh_key_pair("your.email@example.com")

# write them to files
with open('private_key.pem', 'wb') as f:
    f.write(private_key)

with open('public_key.pub', 'wb') as f:
    f.write(public_key)
This script will generate a 2048-bit RSA key pair and write the private and public keys to 'private_key.pem' and 'public_key.pub' files, respectively.

Please note:

The private key should be kept secret and safe. Anyone who has your private key can authenticate as you to any services using this key pair for authentication.

The email address provided as a parameter to the generate_ssh_key_pair function is used as a comment for the public key. It doesn't have any effect on the function of the key pair, but it's often used to help identify who the key belongs to.
