There are many ways to build a web application scanner in Python, from a simple program that checks if a page exists, to a complex application that identifies vulnerabilities such as SQL Injection or Cross-Site Scripting.

The following script is a simple scanner that checks if certain paths exist on a web server. It uses the requests library in Python to send HTTP requests.

python
Copy code
import requests

def scan_web_app(base_url, paths):
    for path in paths:
        url = f"{base_url}/{path}"
        response = requests.get(url)

        if response.status_code == 200:
            print(f"{url} exists")
        else:
            print(f"{url} does not exist")

base_url = "http://example.com"
paths = ["admin", "login", "secret"]

scan_web_app(base_url, paths)
This script checks if the paths "admin", "login", and "secret" exist on the web server "http://example.com". It prints out whether each URL exists or not based on the HTTP status code returned (200 means OK).

Please note:

This is a very basic script and does not identify vulnerabilities, it only checks if a path exists or not.

Use this script responsibly. Don't use it to scan websites that you do not have permission to scan. Unauthorized scanning can be illegal.

This script does not handle errors or edge cases, such as the website being down, paths leading to redirects, the server not responding, etc. A real web application scanner would need to handle these and more.

A real web application scanner would use more advanced techniques to identify vulnerabilities, such as sending payloads and analyzing responses, checking for misconfigurations, version vulnerabilities, and more. It would also likely support more protocols and methods (POST, GET, PUT, etc.), as well as possibly following links and crawling the web application.

There are many great tools already available for web application scanning, such as OWASP ZAP or Burp Suite, which are more advanced and complete than this simple script.
